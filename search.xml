<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[git小记]]></title>
    <url>%2F2017%2F12%2F27%2Fgit%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[git工作流程 git配置 /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。 查看配置信息要检查已有的配置信息，可以使用 git config -l 命令：有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。 配置命令 123456789101112131415161718192021222324252627282930313233343536#1. 设置用户名邮箱 $ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"#2. https替代git协议$ git config --global url."https://".insteadof "git://"$ git config --global url."https://github.com/".insteadof "git@github.com:"#3. 设置代理 $ git config --global http.proxy socks5://127.0.0.1:1080$ git config --global https.proxy socks5://127.0.0.1:1080取消:$ git config --global --unset http.proxy$ git config --global --unset https.proxy#4. 取消crlf自动转换为lf$ git config --global core.autocrlf false#5. 使用simple模式（只推送当前分支到远端）而不是matching（推送本地所有分支到远端）$ git config --global push.default simple#6. Git提交时发生SSL certificate problem错误的解决方法$ git config --global http.sslVerify false#7. Git提交时发生 error: RPC failed;解决办法，把git的buffer扩充到500M：$ git config http.postBuffer 524288000#8. 使用以下命令生成SSH Key：$ ssh-keygen -t rsa -C "youremail@example.com"后面的your_email@example.com改为你在github上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。--&gt;回到github上，进入 Account Settings（账户配置），左边选择SSH Keys，Add SSH Key,title随便填，粘贴在你电脑上生成的key。 参考：http://segmentfault.com/a/1190000002435496 操作 当执行 git checkout . 或者 git checkout -- &lt;file&gt; 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 当执行 git checkout HEAD . 或者 git checkout HEAD &lt;file&gt; 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。 当执行 git reset HEAD 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 git提交小技巧 12345# git add -A = git add . + git add -ugit add -A # stages Allgit add . # stages new and modified, without deletedgit add -u # stages modified and deleted, without new 关于Crlf和lf的那些事:(fatal: CRLF would be replaced by LF ) CR回车 LF换行Windows/Dos CRLF \r\nLinux/Unix LF \nMacOS CR \r解决方法是：打开命令行，进行设置，如果你是在Windows下开发，建议设置autocrlf为true。2014/08/20 补充：如果你文件编码是UTF8并且包含中文文字，那还是把autocrlf设置为false，并且把所有文件转换为Linux编码（即LF\n），开启safecrlf检查。 一、AutoCRLF 12345678#提交时转换为LF，检出时转换为CRLFgit config --global core.autocrlf true #提交时转换为LF，检出时不转换git config --global core.autocrlf input #提交检出均不转换git config --global core.autocrlf false 二、SafeCRLF 12345678#拒绝提交包含混合换行符的文件git config --global core.safecrlf true #允许提交包含混合换行符的文件git config --global core.safecrlf false #提交包含混合换行符的文件时给出警告git config --global core.safecrlf warn bower1. 代理在工程或用户主目录下，新建一个.bowerrc文件，文件内容是JSON格式：12&quot;proxy&quot; : &quot;socks5://127.0.0.1:1080&quot;,&quot;https-proxy&quot;: &quot;socks5://127.0.0.1:1080&quot; 2. shorthand-resolver 默认值： 1git://github.com/&#123;&#123;owner&#125;&#125;/&#123;&#123;package&#125;&#125;.git 如果网络不通，或不能使用git，可以将其修改为1&quot;shorthand-resolver&quot;: &quot;https://github.com/&#123;&#123;owner&#125;&#125;/&#123;&#123;package&#125;&#125;.git&quot; 综合.bowerrc 123"proxy" : "socks5://127.0.0.1:1080","https-proxy": "socks5://127.0.0.1:1080","shorthand-resolver": "https://github.com/&#123;&#123;owner&#125;&#125;/&#123;&#123;package&#125;&#125;.git" centos安装git最新git源码下载地址：https://github.com/git/git/releaseshttps://www.kernel.org/pub/software/scm/git/可以手动下载下来在上传到服务器上面 移除旧版本gitcentos自带Git，7.x版本自带git 1.8.3.1（应该是，也可能不是），安装新版本之前需要使用yun remove git卸载（安装后卸载也可以）。 123[root@Git ~]# git --version ## 查看自带的版本git version 1.8.3.1[root@Git ~]# yum remove git ## 移除原来的版本 安装所需软件包12[root@Git ~]# yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel -y[root@Git ~]# yum install gcc-c++ perl-ExtUtils-MakeMaker autoconf automake libtool -y 下载&amp;安装 12[root@Git ~]# cd /usr/src[root@Git ~]# wget https://www.kernel.org/pub/software/scm/git/git-2.7.3.tar.gz 解压1[root@Git ~]# tar xf git-2.7.3.tar.gz 配置编译安装12345[root@Git ~]# cd git-2.7.3[root@Git ~]# make configure[root@Git ~]# ./configure --prefix=/usr/git ##配置目录[root@Git ~]# make profix=/usr/git[root@Git ~]# make install 加入环境变量12[root@Git ~]# echo "export PATH=$PATH:/usr/git/bin" &gt;&gt; /etc/profile[root@Git ~]# source /etc/profile 检查版本12[root@Git git-2.7.3]# git --version git version 2.7.3 参考文档： Git 安装配置 | 菜鸟教程 Git教程 | 菜鸟教程 git - 简易指南]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于jwt的思考]]></title>
    <url>%2F2017%2F12%2F27%2F%E5%85%B3%E4%BA%8Ejwt%E7%9A%84%E6%80%9D%E8%80%83%2F</url>
    <content type="text"><![CDATA[关于jwt的思考jwt是个做用户权限认证的方案，科普的内容参考相关文档吧，这里提出几个关于jwt的思考： 现有项目架构：12pc项目-&gt;pc服务器-&gt;api服务器app项目-&gt;api服务器 jwt是否需要服务器存储用户状态按照jwt的思路，服务端是不需要存储用户状态的，只要有秘钥+过期时间就可以实现用户的认证和过期，至于读库vs加解密验证哪个过程对服务器的压力更大，这个可能需要对比测试，但从原理和常识来讲，存库读库的成本应该更高一点。无库产生的加解密开销相对于读写库应该是非常小的，而且无库可以轻松做到跨服务器的认证。 jwt方案中token的安全问题两个安全问题： token泄露，泄露一般存在两个地方，1是传输层，2是客户端。先考虑传输层：http被窃听，或者https被破解（https的安全性这里不做讨论），那么如果token在传输层被拦截，传统的cookie存储的sessionId也有一样的问题。再说客户端，一样的情况，如果cookie可以被窃取，token也没办法解决这个问题。已经做过的测试是：拦截到cookie后，把cookie放在另一台电脑上也是可以使用的，这个跟token是一样的。 还有一种情况是重放攻击，http请求被拦截重放，这个安全性对于cookie和jwt是一样的，避免这个问题需要配合其他手段，但基本很难避免。 综上，jwt碰到的安全问题跟传统方式一样。 jwt如何解决续签问题传统的cookie的续签方案一般都是框架自带的，session有效期30分钟，30分钟内如果有访问，session有效期被延长30分钟。那么jwt是怎么实现的呢，细节没看完，不过基本的逻辑是频繁重签名（不知道为什么有人这么干，开销应该不小，而且问题挺多），或者是有效期30分钟，服务器发现token要过期了，提前三分钟重签并返回新的token，客户端每次请求都检测新旧token，如果不一致更新本地token（这个可以放在http的请求预处理里，复杂度和开销都不大）。关于新token的发放导致旧token有效期内的访问失效的问题参见这里的token新旧更替问题讨论 。这种方案就可以实现浏览器里传统cookie的续签需求，以及app7天内登陆就可以持续刷新登陆状态的问题（app比较特殊，每天第一次访问时刷新一下token）。 jwt如何解决注销问题好了，jwt最大的问题来了，怎么注销？先看传统的session是怎么注销的：用户点击退出，调用后台退出接口，也就是session注销接口，依托于后台的状态更新。那么服务端做的呢，如果是用文件或者数据库存储的，那么通过删记录是可以后台强制踢出的，放在内存里就不要想了（如果用户量大了放内存的话服务器也吃不消，放文件里io太频繁基本也不靠谱，还好有了Redis）。jwt最大的问题就在于后台没有存储用户状态，用户退出的话只是客户端删掉了token，然而此token在有效期内还是有效的，也就是说如果token泄露的话就麻烦了，不过token泄露的问题已经在上面讲过了，和cookie是同一个问题。那么最麻烦的就是怎么让一个token在用户注销后失效，以及后台强制退出，这个jwt是没办法的，因为jwt的无状态和用户状态维护是个矛盾冲突的话题。如果要解决就要建立一个黑名单，也就是把用户注销后的token放到redis里，然后每次校验黑名单（这里还是用到了数据库）， 使用jwt+Redis黑名单的方案接上个问题，jwt推崇的无状态和跨服务器认证在数据库的出现后，貌似没有任何优势，真的没有优势吗？也不全是，至少有两个小优势，第一，存储黑名单（也就是注销后的用户或者黑户）比起存储登录之后的用户这个量级都是相当小的，存储量下降&amp;读取速度提高。第二个优势是app和pc能共用同一套认证机制，也就意味着前后端彻底的分离，不必再为cookie和session认证单独搭一个服务器。 用了jwt之后html服务怎么提供呢对于前后端分离的项目来说，pc服务器的两个任务1是做认证（jwt已经解决），2是提供html服务。html服务可以交给nginx或者放到cdn，无论哪个方案都比tomcat之类的静态资源处理能力更强大，也就是说html和js等静态资源全部交给静态资源服务器来处理。那么安全问题又来了，怎么对文件做权限控制呢？对于一个前后端分离的项目来说，html一般不会嵌套后端的代码，所以html没有所谓的安全问题，换句话说html里根本没有任何有价值的内容。对于js来说，里面包含了业务逻辑，实际上对js做限制也是没有任何意义的，因为前端的代码是暴露给客户端的，即便控制，黑客登录之后也是能看到你的代码的，惟一能做的就是压缩混淆，把压缩后的代码放到线上，源码不放到线上，最大程度增加通过阅读js读取业务逻辑的难度（实际意义也不大，尤其对于有些公司压根连压缩这一步都不做的，更没有这个问题的顾虑了）。那么也就是说前后端分离的项目里html（没有后端代码嵌入）和js是没有安全的考虑必要的，真正要考虑的大概也就是图片的防盗链和pdf等静态资源的处理吧，这个因为对于后端不是很熟悉所以不做深入讨论，对于pdf等资源能想到的也就是通过需要授权的接口去拿pdf的路径吧。 到底要不要数据库如果不考虑用户注销后一定要token失效和强制退出需求的话，是不需要数据库的，即便加上redis对于传统方案来说也是有上文提到的两个优势。而且其实注销后一定要token失效主要也是考虑token泄露的问题（见上文），所以如果有踢出用户登录需求的话，还是要有数据库做黑名单存储的，一旦用户被拉入黑名单，就要立马停掉用户的签名发放，所以这个问题并不单单是认证的问题，还有签名发放的问题。 用户认证的终极解决方案（跨服务器）前提就是跨服务，实际上jwt本身已经实现了跨服务（无状态），既然服务端不存储用户状态，只要多个服务器之间使用共同的秘钥和加密方案就可以实现x.abc.com里登录之后在y.abc.com那台服务器做登录认证。但是问题上面也说了，如果不考虑注销和强制退出的情况的话，这个话题也就到处为止了。但是如果完美主义呢？当然还是要实现这两个功能，也就是要有黑名单服务器，或者说认证服务器auth.abc.com，无论x.abc.com还是y.abc.com里登录或者注销都要先通过auth.abc.com，但是带来的读写不一致和额外的认证开销问题大概也是一个历史性难题吧。或许也可以参考Oauth2.0的方案，做隐式认证。不存储用户的状态的话，jwt跨服务器应该是个比较简单的解决方案吧，但如果一个公司有跨服务器需求的话，那么规模之大，里面的后端童鞋应该有更为专业的方案吧，欢迎分享。此段不专业莫要踩我。 结论：上文阐述了作为一个卑微的前端能想到的jwt的问题和思考，总结来说，使用jwt可以实现真正的前后端分离，浏览器可以和app用一样的认证机制，无论对服务器的搭建还是服务器开销都是不错的优化，至于黑名单的设置，这个看需求吧。 彩蛋 为什么会有彩蛋呢，因为结论里不能说太多废话，就搁这里说了，jwt主要解决了浏览器和app共用一个服务器的问题，也就是少了一个pc服务器。有看客就要问了，那你怎么看node呢，ssr？pwa？字节码？这个当然要且看下回分解了️️]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux安装配置vsftpd]]></title>
    <url>%2F2017%2F12%2F27%2FLinux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEvsftpd%2F</url>
    <content type="text"><![CDATA[1. 安装： ubuntu 1sudo apt-get install vsftpd centos 1234567# 检查是否安装vsftpd# 如果出现vsftpd-2.0.5-21.el5，说明已经安装 vsftprpm -qa | grep vsftpd# 或者用yum检查：yum list vsftpd# 安装命令：yum -y install vsftpd 2. 建立vsftpd路径赋予权限，添加uftp用户并设置密码123456789101112#新建文件夹uftpsudo mkdir /home/uftp #添加用户uftpsudo useradd -d /home/uftp -s /bin/bash uftp #设置uftp的用户密码sudo passwd uftp #更改文件夹所属用户sudo chown -R uftp /home/uftp #更改文件夹所属用户组sudo chgrp -R uftp /home/uftp #更改文件夹权限sudo chmod 775 /home/uftp 3. 下载FileZilla或者WinSCP一路下一步安装1填入服务器地址，协议为sftp，端口选22，用户名密码为uftp 更多配置及安装信息见：玩转vsftpd服务器的四大高级配置]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>ftp</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js函数声明与函数表达式]]></title>
    <url>%2F2017%2F12%2F27%2Fjs%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[js中函数声明 &amp; 函数表达式 函数声明： 1function 函数名称 (参数：可选)&#123; 函数体 &#125; 函数表达式： 1function 函数名称（可选）(参数：可选)&#123; 函数体 &#125; 如何辨别不包含函数名为函数表达式，如果包含，参见下文 函数声明： 12345function foo()&#123;&#125; // 声明，因为它是程序的一部分(function()&#123; function bar()&#123;&#125; // 声明，因为它是函数体的一部分&#125;)(); 函数表达式 12345var bar = function foo()&#123;&#125;; // 表达式，赋值表达式的一部分new function bar()&#123;&#125;; // 表达式，new表达式(function foo()&#123;&#125;); // 函数表达式：包含在**分组操作符**内 有何作用函数声明会在任何表达式被解析和求值之前先被解析和求值，即使你的声明在代码的最后一行，它也会在同作用域内第一个表达式之前被解析/求值eg：1234alert(fn()); //正常弹出，因为执行前已定义fnfunction fn() &#123; return &apos;Hello world!&apos;;&#125; 特例：if语句也可以声明函数，但各浏览器结果不同 12345678910111213141516171819202122232425if (true) &#123; function foo() &#123; return 'first'; &#125;&#125;else &#123; function foo() &#123; return 'second'; &#125;&#125;foo();//经测试Chrome无论条件真假都会返回second；// 相反，这样情况，我们要用函数表达式var foo;if (true) &#123; foo = function() &#123; return 'first'; &#125;;&#125;else &#123; foo = function() &#123; return 'second'; &#125;;&#125;foo(); 关于分组操作符：12345try &#123; (var x = 5); // 分组操作符，只能包含表达式而不能包含语句：这里的var就是语句，去掉小括号正常；&#125; catch(err) &#123; // SyntaxError&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript运算符优先级，逻辑表达式，等于全等于，序列检测小结]]></title>
    <url>%2F2017%2F12%2F27%2FJavaScript%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%EF%BC%8C%E9%80%BB%E8%BE%91%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E7%AD%89%E4%BA%8E%E5%85%A8%E7%AD%89%E4%BA%8E%EF%BC%8C%E5%BA%8F%E5%88%97%E6%A3%80%E6%B5%8B%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[1. JavaScript运算符优先级 序号 运算符 描述 01 . [] () 对象成员存取、数组下标、函数调用等 02 ++ – ~ ！ delete new typeof void 一元运算符等 03 * / % 乘法、除法、取模 04 + - + 加法、减法、字符串连接 05 &lt;&lt; &gt;&gt; &gt;&gt;&gt; 移位 06 &lt; &lt;= &gt; &gt;= instanceof 序列检测，instanceof 07 == != === !== 等值检测 08 &amp; 按位与 09 ^ 按位异或 10 &#124; 按位或 11 &amp;&amp; 逻辑与 12 &#124;&#124; 逻辑或 13 ?: 条件（右结合性） 14 = op= 赋值、运算赋值 15 , 多重求值 2. js逻辑表达式四条规则： 1234规则1 ：支持布尔短路规则2： 将运算元理解为布尔值，以进行布尔运算规则3： 不改变运算元的数据类型规则4： 不强制运算结果的数据类型 两条特性：（看第一个参数）121：a1 &amp;&amp; a2 --&gt;a1？a2：a1；2：a1 || a2 --&gt;a1？a1：a2； 3. js等于与全等于1.等值检测中“相等”的运算规则（==） 类型 运算规则 两个值类型比较 转换成相同数据类型的值进行“数据等值”的比较 值类型与引用类型比较 将引用类型数据转换为与值类型数据相同类型的数据，再进行“数据等值”比较 两个引用类型比较 比较引用（的地址） 2.等值检测中“相同”的运算规则（===） 类型 运算规则 两个值类型比较 数据类型不同，则必然“不相同”数据类型相同，进行“等值比较” 值类型与引用类型比较 必然“不相同” 两个引用类型比较 比较引用（的地址） 备注在三种类型（数值，布尔值和字符串）中，数值和布尔值的“数据等值”检测开销比较小，但对字符串检测时就存在较大的开销。因为必须对字符串中的每一个字符进行比较，才能判断两个字符串是否相等。 4. 序列检测可进行序列检测的数据类型： 可比较序列的类型 序列值 boolean 0-1 string (*注1) number NEGATIVE_INFINITY ~ POSITIVE_INFINIGY(*注2) 注1：在js中，不存在char（字符）这种数据类型，但字符串的每一个字符，都被作为单一字符（#0~#255）参与序列检测注2：负无穷~正无穷，NaN不参与序列检测tip： 123!isFinite()===isNaN() //trueisFinite(undefined)===isNaN(null) //falseisFinite(null)===isNaN(undefined) //true undefined – NaNnull !– NaN 5. 序列检测规则 类型 运算规则 两个值类型进行比较 直接比较数据再序列中的大小 值类型与引用类型比较 将引用类型的数值转换为与值类型数据相同类型的数据，再进行”序列大小”的比较 两个引用类型比较 无意义总是返回false（*注3） 注3：对引用类型进行序列检测也是有可能的，取决于valueof()运算效果 示例1：布尔值转换为0/1，只相等不相同 12true==1 //truetrue===1 //false` 示例2：空字符串转换为0值 123''==0 //true' '==0 //true''===0 //false 示例3：两个对象（引用类型比较总是返回false） 1234var o1 = o2 = &#123;&#125;;var o3 = &#123;&#125;;o1 === o2 //trueo1 == o3 //false 示例4：两个运算元都为字符串，将比较每个字符的序列值 示例5：当字符串与其他类型值比较时，将字符串转换为数值比较 参考书籍：《JavaScript语言精髓与编程实践》第二版 周爱民2012.3]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[转载]20个常用正则表达式]]></title>
    <url>%2F2017%2F12%2F27%2F%E8%BD%AC%E8%BD%BD-20%E4%B8%AA%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[转载：知道这20个正则表达式，能让你少写1,000行代码：http://www.jianshu.com/p/e7bb97218946 1.校验密码强度密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。1^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$ 2. 校验中文字符串仅能是中文。1^[\\u4e00-\\u9fa5]&#123;0,&#125;$ 3. 由数字、26个英文字母或下划线组成的字符串1^\\w+$ 4. 校验E-Mail 地址同密码一样，下面是E-mail地址合规性的正则检查语句1[\\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])? 5. 校验身份证号码15位：1^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$ 18位：1^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9]|X)$ 6. 校验日期“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。1^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$ 7. 校验金额金额校验，精确到2位小数。1^[0-9]+(.[0-9]&#123;2&#125;)?$ 8. 校验手机号下面是国内 13、15、18开头的手机号正则表达式。1^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$ 9. 判断IE的版本IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。1^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\/[5-9]\\.0).*$ 10. 校验IP-v4地址1\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b 11. 校验IP-v6地址1(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7,7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]&#123;1,&#125;|::(ffff(:0&#123;1,4&#125;)&#123;0,1&#125;:)&#123;0,1&#125;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])) 12. 检查URL的前缀应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。1234if (!s.match(/^[a-zA-Z]+:\\/\\//))&#123; s = &apos;http://&apos; + s;&#125; 13. 提取URL链接下面的这个表达式可以筛选出一段文本中的URL。1^(f|ht)&#123;1&#125;(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)? 14. 文件路径及扩展名校验1^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?&quot;&lt;&gt;|]+\\.txt(l)?$ 15. 提取Color Hex Codes有时需要抽取网页中的颜色代码，可以使用下面的表达式。1\\#([a-fA-F]|[0-9])&#123;3,6&#125; 16. 提取网页图片假若你想提取网页中所有图片信息，可以利用下面的表达式。1\\&lt; *[img][^\\&gt;]*[src] *= *[\\&quot;\\&apos;]&#123;0,1&#125;([^\\&quot;\\&apos;\\ &gt;]*) 17. 提取页面超链接1(&lt;a\\s*(?!.*\\brel=)[^&gt;]*)(href=&quot;https?://)((?!(?:(?:www\\.)?&apos;.implode(&apos;|(?:www\\.)?&apos;, $follow_list).&apos;))[^&quot;]+)&quot;((?!.*\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt; 18. 精炼CSS通过下面的表达式，可以搜索相同属性值的CSS，从而达到精炼代码的目的。1^\\s*[a-zA-Z\\-]+\\s*[:]&#123;1&#125;\\s[a-zA-Z0-9\\s.#]+[;]&#123;1&#125; 19. 抽取注释如果你需要移除HMTL中的注释，可以使用如下的表达式。1&lt;!--(.*?)--&gt; 20. 匹配HTML标签1&lt;/?\\w+((\\s+\\w+(\\s*=\\s*(?:&quot;.*?&quot;|&apos;.*?&apos;|[\\^&apos;&quot;&gt;\\s]+))?)+\\s*|\\s*)/?&gt; 21. 普通校验手机号1/^1\d&#123;10&#125;$/ 22.交易密码正则（必须为6位数字）1/^\d&#123;6&#125;$/ 23.密码正则（8到16位必须包含字母和数字）1/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]&#123;8,16&#125;$/ 24. 检查isWeixin1/MicroMessenger/gi.test(UA) 25.检查isAndroid1/android|adr/gi.test(UA) 26.检查isIos1/iphone|ipod|ipad/gi.test(UA) &amp;&amp; !isAndroid 27.检查isMobile1isAndroid || isIos 参考资料： 知道这20个正则表达式，能让你少写1,000行代码： http://www.jianshu.com/p/e7bb97218946]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos配置jdk、svn、maven、tomcat]]></title>
    <url>%2F2017%2F12%2F27%2Fcentos%E9%85%8D%E7%BD%AEjdk%E3%80%81svn%E3%80%81maven%E3%80%81tomcat%2F</url>
    <content type="text"><![CDATA[1. 安装svn1234567891011121314#添加svn源vi /etc/yum.repos.d/wandisco-svn.repo#添加以下内容进去[WandiscoSVN]name=Wandisco SVN Repobaseurl=http://opensource.wandisco.com/centos/$releasever/svn-1.8/RPMS/$basearch/enabled=1gpgcheck=0#删除之前版本yum remove subversion* -y &amp;&amp; yum clean all#执行安装命令（使用proxychains4代理）proxychains4 yum install subversion -y#检查版本svn --version 参考How to Install Subversion (SVN) 1.8.15 on CentOS/RHEL 7/6/5svn 冲突的产生与解决 2. 检出仓库1svn co http://abc folder --username gxl 参考：SVN命令使用详解 3. 安装jdk7123456789101112131415161718192021222324//1.建立java目录并进入sudo mkdir /usr/local/java &amp;&amp; cd /usr/local/java//2.wget获取jdk7.tar.gz （用proxychains4代理下载或者迅雷下载完用ftp上传）wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/7u79-b15/jdk-7u79-linux-x64.tar.gz//3.解压jdksudo tar xvf jdk-7u79-linux-x64.tar.gz//4.设置环境变量sudo vi /etc/profile//5.在末尾添加：#JDK7 settingsexport JAVA_HOME=/usr/local/java/jdk1.7.0_79export JRE_HOME=$JAVA_HOME/jreexport CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/libexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin//6.使profile生效sudo source /etc/profile//7.检查是否成功java -version 参考：JDK7下载地址 linux通过wget直接下载jdk，避免用户验证 CentOS下安装JDK1.7 CentOS6.5菜鸟之旅：安装SUN JDK1.7和Tomcat7 4.安装p7zip123456789//1.编译安装前，安装必要的套件包yum install kernel-devel kernel-headers gcc-c++ make -y//2.下载解压编译安装wget http://jaist.dl.sourceforge.net/project/p7zip/p7zip/16.02/p7zip_16.02_src_all.tar.bz2tar -jxvf p7zip_16.02_src_all.tar.bz2cd p7zip_16.02make &amp;&amp; make install//3.查看是否安装成功：7za 参考：如何在CentOS 7中安装7ZIP 5.安装maven1234567891011121314cd /usr/local/srcwget http://apache.fayea.com/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gztar xzvf apache-maven-3.3.9-bin.tar.gzmv apache-maven-3.3.9 ../maven3#配置环境变量vi /etc/profile#在末尾添加：#配置maven3export M2_HOME=/usr/local/maven3export PATH=$PATH:$M2_HOME/bin#使环境变量生效source /etc/profile#测试是否安装成功：mvn -v 参考：maven下载地址：CentOS安装Maven 6.配置tomcat712345cd /usr/local/srcwget http://www.us.apache.org/dist/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gztar xzvf apache-tomcat-7.0.70.tar.gzmv apache-tomcat-7.0.70 ../tomcat7/usr/local/tomcat7/bin/startup.sh 参考CentOS 6.4安装搭建Tomcat 7]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[truffle安装指南]]></title>
    <url>%2F2017%2F12%2F26%2Ftruffle%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[安装步骤首先安装最新版的node，然后执行以下命令更改npm镜像： 12npm i -g nrm --registry=https://registry.npm.taobao.orgnrm use taobao 然后执行以下命令安装ganache-cli（原testrpc）并启动： 12npm install -g ganache-cliganache-cli 然后新开一个窗口创建truffle项目： 1234567891011# 全局安装trufflenpm install -g truffle# 创建项目目录mkdir /home/eth/truffle-webpack/ -pcd /home/eth/truffle-webpack/# 初始化项目truffle unbox webpack# 编译项目truffle compile# 发布项目truffle migrate 然后修改package.json文件：1&quot;dev&quot;: &quot;webpack-dev-server --host 0.0.0.0 --port 8080&quot; 然后修改truffle.js文件：12345development: &#123; host: &apos;yourIp&apos;, port: 8545, network_id: &apos;*&apos; // Match any network id&#125; 然后修改app/javascripts/app.js文件：把：window.web3 = new Web3(new Web3.providers.HttpProvider(“http://127.0.0.1:9545“));改成：1window.web3 = new Web3(new Web3.providers.HttpProvider(&quot;http://yourIp:8545&quot;)); 然后执行下命令：1npm run dev 通过浏览器访问：ip:8080 重启进程通过以下命令查看8080和8545端口的占用：Linux:1netstat -lnp | grep &lt;port&gt; Windows:1netstat -ano | findstr &lt;port&gt; 查到pid之后执行以下命令：Linux:12ps &lt;pid&gt;kill -9 &lt;pid&gt; Windows:1taskkill /F /PID &lt;pid&gt; 杀掉ganache-cli和truffle的进程之后执行： 1.开启ganache-cli服务1ganache-cli 2.开启truffle服务：12cd /home/eth/truffle-webpack/npm run dev 3.通过浏览器访问：ip:8080 碰到的问题：1TypeError: fsevents is not a constructor 所以需要使用truffle init webpack 来代替官方的truffle init命令 然后需要修改package.json文件以支持ip：port的访问（默认是localhost：port） 然后用npm run dev来代替官方truffle serve命令 至此，通过访问localhost:8080即可（要保证ganache-cli在后台运行）]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>truffle</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker的安装配置]]></title>
    <url>%2F2017%2F12%2F22%2Fdocker%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[docker安装：https://dev.aliyun.com/search.html 通过管理中心进去获取自己的国内镜像加速器（注册登录阿里云账号）： 图中打叉的请直接忽略掉（大坑），直接把如下链接对应的docker客户端下载安装即可，安装会提示你升级到最新版，请忽略掉（大坑），让你重启就乖乖听话。 Windows系统的安装文件目录：http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/ 配置镜像方式如下： 第二行请参照上文获取到的加速器（配置docker-cn+阿里云加速两个加速器） 阿里云镜像搜索： https://dev.aliyun.com/search.html 菜鸟教程： http://www.runoob.com/docker/docker-tutorial.html 常用命令：12345678910111213docker version // 查看版本docker info // 查看配置信息docker images // 查看imagesdocker ps -a // 查看containerdocker pull &lt;registry&gt; // 从镜像仓库中拉取或者更新指定镜像docker run &lt;registry&gt; // 创建一个新的容器并运行一个命令docker exec &lt;container&gt; // 在运行的容器中执行命令 1234567891011docker run/exec-i 交互式 -t 伪终端 -d 守护进程后台运行一般会使用-it参数进入（退出后进程关闭），需要进程持续运行添加-d参数docker rm 删除container-v 删除本地挂载目录，-f强制删除docker rmi 删除image docker安装centos12345678910111213# 拉取centos镜像并启动docker pull centosdocker run -itd centos:latest /bin/bashdocker psdocker exec -it &lt;containerId&gt; /bin/bash# 进入centos容器之后的简单配置yum install -y wgetcp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bakwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo wget -P /etc/yum.repos.d/ http://mirrors.aliyun.com/repo/epel-7.repo yum clean all &amp;&amp; yum makecacheyum update centos7安装docker：https://yq.aliyun.com/articles/110806 新手先安装好docker ，然后docker version和docker info看一下，然后看一下菜鸟教程能够有个大致了解即可。老鸟请忽略以上内容。 祝君好运😀]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[天涯浪逍遥]]></title>
    <url>%2F2017%2F12%2F20%2F%E5%A4%A9%E6%B6%AF%E6%B5%AA%E9%80%8D%E9%81%A5%2F</url>
    <content type="text"><![CDATA[曾为你画地为牢风也萧萧雨也萧萧中了爱你的蛊怎么逃又是一季韶华老鬓发已微醺君未归寂寞心事谁人聊犹记当时年少情字刻心头許一世只为君折腰如今月已上柳梢人归花向晚整行囊天涯浪逍遥]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[hexo搭建小记]]></title>
    <url>%2F2017%2F12%2F20%2Fhexo%E6%90%AD%E5%BB%BA%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[搭建过程 首先创建username.github.io的仓库（以username为前缀的话，pages服务只能是master分支） 然后创建hexo仓库，用来维护源码 &amp; nuxt主题配置 根据博主 shenzekun 的 教程 进行配置 修改模板文件，更改cdn路径加快国内访问速度 替换 googleapisLUG@USTC Google Fonts 加速服务：https://lug.ustc.edu.cn/wiki/lug/services/googlefonts 原地址 新地址 301地址 fonts.googleapis.com fonts.lug.ustc.edu.cn fonts.proxy.ustclug.org ajax.googleapis.com ajax.lug.ustc.edu.cn ajax.proxy.ustclug.org themes.googleusercontent.com google-themes.lug.ustc.edu.cn google-themes.proxy.ustclug.org fonts.gstatic.com fonts-gstatic.lug.ustc.edu.cn fonts-gstatic.proxy.ustclug.org 附加资源在线沟通：http://daovoice.io/ bass服务：https://leancloud.cn/ 图标网站1：http://www.easyicon.net/update/ 图标网站2：http://fontawesome.io/icons/ hexo系列文章：https://segmentfault.com/u/adam_home Next主题使用指南：http://theme-next.iissnan.com/getting-started.html Hexo博客优化，如何加快你的博客访问速度(精)http://www.joryhe.com/2016-06-05-hexo_site_seo_speed_more_optimization.html 怎样制作属于自己的Live2D角色？https://www.g-cores.com/articles/19597]]></content>
      <categories>
        <category>小记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
